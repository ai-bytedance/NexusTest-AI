services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_DB: ${POSTGRES_DB:-app}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    image: nexustest-backend:local
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ../.env
    volumes:
      - ../.env:/app/.env:ro
      - ../backend/alembic:/app/alembic
      - ../backend/alembic.ini:/app/alembic.ini:ro
    environment:
      UVICORN_WORKERS: ${UVICORN_WORKERS:-2}
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:8080","http://127.0.0.1:8080"]}
      ALLOW_ANY_ORIGIN: ${ALLOW_ANY_ORIGIN:-false}
    command: ["sh", "-c", "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers ${UVICORN_WORKERS:-2}"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    expose:
      - "8000"

  celery-worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    image: nexustest-backend:local
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ../.env
    volumes:
      - ../.env:/app/.env:ro
    environment:
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:8080","http://127.0.0.1:8080"]}
      ALLOW_ANY_ORIGIN: ${ALLOW_ANY_ORIGIN:-false}
    command: ["sh", "-c", "celery -A app.core.celery_app worker --loglevel=info -Q cases,suites"]

  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
    image: nexustest-backend:local
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - ../.env
    volumes:
      - ../.env:/app/.env:ro
    environment:
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:8080","http://127.0.0.1:8080"]}
      ALLOW_ANY_ORIGIN: ${ALLOW_ANY_ORIGIN:-false}
    command: ["sh", "-c", "celery -A app.core.celery_app beat --loglevel=info"]

  flower:
    build:
      context: ../backend
      dockerfile: Dockerfile
    image: nexustest-backend:local
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    env_file:
      - ../.env
    volumes:
      - ../.env:/app/.env:ro
    environment:
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:8080","http://127.0.0.1:8080"]}
      ALLOW_ANY_ORIGIN: ${ALLOW_ANY_ORIGIN:-false}
    command: ["sh", "-c", "celery -A app.core.celery_app flower --address=0.0.0.0 --port=5555 --url-prefix=flower --queues=cases,suites"]
    expose:
      - "5555"

  nginx:
    build:
      context: ../
      dockerfile: infra/nginx/Dockerfile
      args:
        NPM_REGISTRY: https://registry.npmmirror.com
        # HTTP_PROXY: http://proxy.yourcorp:8080
        # HTTPS_PROXY: http://proxy.yourcorp:8080
        # USE_LOCAL_DIST: "true"
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
      flower:
        condition: service_started
    ports:
      - "0.0.0.0:8080:80"

volumes:
  postgres_data:
