name: NetTests CI on Pull Request

on:
  pull_request:
  workflow_call:
    inputs:
      project_id:
        description: "Project ID to execute"
        required: false
        type: string
      suite_id:
        description: "Suite ID to execute"
        required: false
        type: string
      threshold:
        description: "Pass rate threshold (fraction or percentage)"
        required: false
        type: string
      base_url:
        description: "Backend API base URL"
        required: false
        type: string
      report_base_url:
        description: "Optional base URL for report links"
        required: false
        type: string
    secrets:
      nt_api_token:
        required: false
      nt_email:
        required: false
      nt_password:
        required: false

jobs:
  run-suite:
    name: Run NetTests suite
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install CLI dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx

      - name: Execute NetTests CLI
        id: nt-cli
        continue-on-error: true
        env:
          NT_API_BASE: ${{ inputs.base_url || vars.NT_API_BASE }}
          NT_REPORT_BASE_URL: ${{ inputs.report_base_url || vars.NT_REPORT_BASE_URL || inputs.base_url || vars.NT_API_BASE }}
          NT_PROJECT_ID: ${{ inputs.project_id || vars.NT_PROJECT_ID }}
          NT_SUITE_ID: ${{ inputs.suite_id || vars.NT_SUITE_ID }}
          NT_PASS_THRESHOLD: ${{ inputs.threshold || vars.NT_PASS_THRESHOLD || '1.0' }}
          NT_API_TOKEN: ${{ secrets.nt_api_token || secrets.NT_API_TOKEN }}
          NT_EMAIL: ${{ secrets.nt_email || secrets.NT_EMAIL }}
          NT_PASSWORD: ${{ secrets.nt_password || secrets.NT_PASSWORD }}
          NT_OUTPUT_FORMAT: json
          NT_OUTPUT_FILE: nt_result.json
        run: |
          python scripts/nt_cli.py

      - name: Capture summary output
        id: summary
        if: always()
        run: |
          python <<'PY'
          import json
          import os

          path = "nt_result.json"
          if os.path.exists(path):
              with open(path, "r", encoding="utf-8") as handle:
                  data = json.load(handle)
          else:
              data = {
                  "status": "error",
                  "outcome": "error",
                  "pass_rate": 0.0,
                  "threshold": 0.0,
                  "task_id": None,
                  "report_id": None,
                  "report_url": None,
                  "exit_code": 1,
                  "message": "nt_cli.py did not produce nt_result.json",
              }

          pass_rate = data.get("pass_rate") or 0.0
          pass_rate_pct = f"{pass_rate * 100:.1f}%"
          threshold = data.get("threshold") or 0.0
          threshold_pct = f"{threshold * 100:.1f}%"
          report_url = data.get("report_url_full") or data.get("report_url") or "N/A"

          lines = [
              "### NetTests Execution",
              "",
              f"- **Status:** {str(data.get('status', 'unknown')).upper()}",
              f"- **Outcome:** {data.get('outcome', 'unknown').replace('_', ' ').title()}",
              f"- **Pass rate:** {pass_rate_pct} (threshold {threshold_pct})",
              f"- **Report:** {report_url}",
              f"- **Task ID:** `{data.get('task_id') or 'n/a'}`",
              f"- **Report ID:** `{data.get('report_id') or 'n/a'}`",
          ]
          message = data.get("message")
          if message:
              lines.extend(["", f"> {message}"])
          body = "\n".join(lines)

          with open("comment.md", "w", encoding="utf-8") as comment:
              comment.write(body)

          gh_out = os.environ.get("GITHUB_OUTPUT")
          if gh_out:
              with open(gh_out, "a", encoding="utf-8") as fh:
                  print(f"exit_code={data.get('exit_code', 1)}", file=fh)
          PY

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('comment.md', 'utf8');
            const { context } = github;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body,
            });

      - name: Enforce CLI result
        if: steps.nt-cli.outcome != 'success'
        run: |
          echo "Tests did not meet the required threshold"
          exit ${{ steps.summary.outputs.exit_code || 1 }}
